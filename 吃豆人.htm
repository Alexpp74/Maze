<!DOCTYPE html>
<html>
<head>
    <title>自動生成迷宮遊戲</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }

        canvas {
            border: 2px solid #333;
        }
    </style>
</head>
<body>
    <canvas id="mazeCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('mazeCanvas');
        const ctx = canvas.getContext('2d');

        // 迷宮設定
        const mazeWidth = canvas.width;
        const mazeHeight = canvas.height;
        const cellSize = 20;
        const maze = generateMaze(mazeWidth / cellSize, mazeHeight / cellSize);
        const player = { x: 0, y: 0 }; // 初始玩家位置
        const exit = { x: maze[0].length - 2, y: maze.length - 2 }; // 出口位置

        function generateMaze(width, height) {
            const maze = [];
            for (let i = 0; i < height; i++) {
                maze[i] = [];
                for (let j = 0; j < width; j++) {
                    maze[i][j] = 1; // 初始全部設置為牆壁
                }
            }

            // 遞歸深度優先搜索生成迷宮
            function recursiveDFS(x, y) {
                maze[y][x] = 0; // 標記當前位置為通路

                const directions = [
                    { dx: 0, dy: -2 },
                    { dx: 0, dy: 2 },
                    { dx: -2, dy: 0 },
                    { dx: 2, dy: 0 }
                ];

                // 隨機打亂方向
                for (let i = directions.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [directions[i], directions[j]] = [directions[j], directions[i]];
                }

                for (const dir of directions) {
                    const newX = x + dir.dx;
                    const newY = y + dir.dy;

                    if (newX >= 0 && newX < width && newY >= 0 && newY < height && maze[newY][newX] === 1) {
                        // 檢查新位置是否合法
                        maze[y + dir.dy / 2][x + dir.dx / 2] = 0; // 打通牆壁
                        recursiveDFS(newX, newY); // 遞歸探索
                    }
                }
            }

            recursiveDFS(0, 0); // 從起始點開始生成迷宮
            return maze;
        }

        function drawMaze() {
            ctx.clearRect(0, 0, mazeWidth, mazeHeight);

            for (let y = 0; y < maze.length; y++) {
                for (let x = 0; x < maze[y].length; x++) {
                    if (maze[y][x] === 1) {
                        ctx.fillStyle = '#333'; // 牆壁顏色
                        ctx.fillRect(x * cellSize, y * cellSize, cellSize, cellSize);
                    }
                }
            }
        }

        function drawPlayer() {
            ctx.fillStyle = 'red'; // 玩家顏色
            ctx.fillRect(player.x * cellSize, player.y * cellSize, cellSize, cellSize);
        }

        function drawExit() {
            ctx.fillStyle = 'green'; // 出口顏色
            ctx.fillRect(exit.x * cellSize, exit.y * cellSize, cellSize, cellSize);
        }

        function movePlayer(direction) {
            const newX = player.x + direction.x;
            const newY = player.y + direction.y;

            // 檢查新位置是否合法，並且不超出迷宮邊界
            if (newX >= 0 && newX < maze[0].length && newY >= 0 && newY < maze.length && maze[newY][newX] === 0) {
                player.x = newX;
                player.y = newY;
            }

            // 如果玩家達到出口，遊戲結束
            if (player.x === exit.x && player.y === exit.y) {
                alert('恭喜你贏得了遊戲！');
                document.location.reload();
            }
        }

        document.addEventListener('keydown', (event) => {
            switch (event.key) {
                case 'ArrowUp':
                    movePlayer({ x: 0, y: -1 });
                    break;
                case 'ArrowDown':
                    movePlayer({ x: 0, y: 1 });
                    break;
                case 'ArrowLeft':
                    movePlayer({ x: -1, y: 0 });
                    break;
                case 'ArrowRight':
                    movePlayer({ x: 1, y: 0 });
                    break;
            }
            drawMaze();
            drawPlayer();
            drawExit();
        });

        drawMaze();
        drawPlayer();
        drawExit();
    </script>
</body>
</html>
